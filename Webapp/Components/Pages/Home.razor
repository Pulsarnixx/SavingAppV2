@page "/"

@inject ISavingService SavingService
@inject NavigationManager uriHelper
@attribute [StreamRendering(false)] 
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<h3>List</h3>

@if(savings is null)
{
    <span> Loading... </span>
}
else if(savings.Count == 0)
{
    <span> No Examples... </span>
}

else{
    <RadzenDataGrid Render="@OnRender" AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true" AllowPaging="true" AllowSorting="true" Data="@savings" TItem="SavingEntity">
        <Columns>
            <RadzenDataGridColumn TItem="SavingEntity" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="SavingEntity" Property="Category" Title="Category" />
            <RadzenDataGridColumn TItem="SavingEntity" Property="Amount" Title="Amount" />
            <RadzenDataGridColumn TItem="SavingEntity" Property="Date" Title="Date">
                <Template Context="saving">@saving.Date.ToShortDateString()</Template>
           </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SavingEntity">
            <Template Context="saving">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" 
                Size="ButtonSize.Medium" Click="@(args => EditRow(saving))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" 
                Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" 
                class="my-1 ms-1" Click="@(args => DeleteRow(saving))" @onclick:stopPropagation="true" />
            </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

}

<CreateSavingButton/>


@code {

    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public EventCallback OnOdswiez { get; set; }
    List<SavingEntity>? savings = null;

    protected override async Task OnInitializedAsync(){
        savings = await SavingService.GetAllExamples();
    }

    void NevigateToYourUrl()
    {
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }


     DataGridEditMode editMode = DataGridEditMode.Single;
    void OnRender(DataGridRenderEventArgs<SavingEntity> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Sorts.Add(new SortDescriptor() { Property = "Category", SortOrder = SortOrder.Ascending });
            args.Grid.Sorts.Add(new SortDescriptor() { Property = "Amount", SortOrder = SortOrder.Ascending });
            args.Grid.Sorts.Add(new SortDescriptor() { Property = "Date", SortOrder = SortOrder.Ascending });
        }
    }
    async Task EditRow(SavingEntity saving)
    {
        await SavingService.EditSaving(saving.Id, saving);
    }
    @* TODO: ZMIENIC TO W PRZYSZLOSCI *@
    async Task DeleteRow(SavingEntity saving) {
        
        await SavingService.DeleteSaving(saving.Id);
        NevigateToYourUrl();

    }
}